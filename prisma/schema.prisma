// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_URL")
}

model Transaction {
  id              Int               @id @default(autoincrement())
  amount          Float
  envelopeName    String?
  date            DateTime          @default(now())
  envelope        Envelope?         @relation(fields: [envelopeName, userID], references: [name, userID])
  payee           String?
  description     String?
  userID          String
  user            User              @relation(fields: [userID], references: [id])
  plaidID         String?           @unique
  bankAccount     BankAccount       @relation(fields: [userID, bankAccountName], references: [userId, name])
  bankAccountName String
  source          TransactionSource
  pending         Boolean
  linked          Boolean           @default(false)
}

enum TransactionSource {
  PLAID
  USER
}

// Facilitate user renaming of payees
model Payee {
  plaidName String @id
  userID    String
  user      User   @relation(fields: [userID], references: [id])
  name      String
}

model Envelope {
  name         String
  Transactions Transaction[]
  goals        Goal[]
  allocated    Allocated[]
  userID       String
  user         User          @relation(fields: [userID], references: [id])

  @@id([name, userID])
}

model Goal {
  type         GoalFrequency
  amount       Float
  begin        Int
  due          DateTime
  envelopeName String
  envelope     Envelope      @relation(fields: [envelopeName, userID], references: [name, userID])
  userID       String
  user         User          @relation(fields: [userID], references: [id])

  @@unique([envelopeName, userID])
}

enum GoalFrequency {
  MONTHLY
  YEARLY
  WEEKLY
}

model BankAccount {
  id               Int           @id @default(autoincrement())
  name             String
  userProvidedName String?
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  plaidId          String        @unique
  plaidItem        PlaidItem?    @relation(fields: [plaidItemId], references: [id])
  plaidItemId      String?
  transactions     Transaction[]
  creditCard       Boolean       @default(false)

  @@unique([userId, name])
  @@unique([userId, userProvidedName])
}

model Allocated {
  monthIndex   Int
  amount       Float
  Envelope     Envelope @relation(fields: [envelopeName, userID], references: [name, userID])
  envelopeName String
  userID       String
  user         User     @relation(fields: [userID], references: [id])

  @@unique([monthIndex, envelopeName, userID])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @unique
  auth_session      Session[]
  key               Key[]
  name              String?
  username          String?
  email             String              @unique
  emailVerified     Boolean             @default(false)
  image             String?
  accounts          Account[]
  transactions      Transaction[]
  envelopes         Envelope[]
  goals             Goal[]
  allocated         Allocated[]
  plaidItems        PlaidItem[]
  BankAccount       BankAccount[]
  Payee             Payee[]
  emailVerification EmailVerification[]
  PasswordReset     PasswordReset[]
}

model EmailVerification {
  id      String   @id
  expires DateTime
  userId  String
  user    User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordReset {
  id      String @id
  expires BigInt
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId  String
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlaidItem {
  id           String        @id
  accessToken  String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  cursor       String?
  bankAccounts BankAccount[]
}
