// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Transaction {
  id            Int         @id @default(autoincrement())
  amount        Float
  envelopeName  String?
  date          DateTime    @default(now())
  envelope      Envelope?   @relation(fields: [envelopeName, userID], references: [name, userID])
  payee         String?
  description   String?
  userID        String
  user          User        @relation(fields: [userID], references: [id])
  plaidID       String?     @unique
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId Int
}

model Envelope {
  name         String
  transactions Transaction[]
  goals        Goal[]
  allocated    Allocated[]
  userID       String
  user         User          @relation(fields: [userID], references: [id])

  @@id([name, userID])
}

model Goal {
  type         String // "Monthly", "Yearly", or "Weekly". Should be an enum but SQLite
  amount       Float
  begin        Int
  due          DateTime
  envelopeName String
  envelope     Envelope @relation(fields: [envelopeName, userID], references: [name, userID])
  userID       String
  user         User     @relation(fields: [userID], references: [id])

  @@unique([envelopeName, userID])
}

model BankAccount {
  id           Int           @id @default(autoincrement())
  name         String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  plaidId      String        @unique
  plaidItem    PlaidItem?    @relation(fields: [plaidItemId], references: [id])
  plaidItemId  String?
  transactions Transaction[]

  @@unique([userId, name])
}

model Allocated {
  monthIndex   Int
  amount       Float
  Envelope     Envelope @relation(fields: [envelopeName, userID], references: [name, userID])
  envelopeName String
  userID       String
  user         User     @relation(fields: [userID], references: [id])

  @@unique([monthIndex, envelopeName, userID])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  envelopes     Envelope[]
  goals         Goal[]
  allocated     Allocated[]
  plaidItems    PlaidItem[]
  BankAccount   BankAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlaidItem {
  id           String        @id
  accessToken  String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  cursor       String?
  bankAccounts BankAccount[]
}
